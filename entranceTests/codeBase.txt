wdio.conf.js:
"export const config = {
    //
    // ====================
    // Runner Configuration
    // ====================
    // WebdriverIO supports running e2e tests as well as unit and component tests.
    runner: 'local',
    //
    // ==================
    // Specify Test Files
    // ==================
    // Define which test specs should run. The pattern is relative to the directory
    // of the configuration file being run.
    //
    // The specs are defined as an array of spec files (optionally using wildcards
    // that will be expanded). The test for each spec file will be run in a separate
    // worker process. In order to have a group of spec files run in the same worker
    // process simply enclose them in an array within the specs array.
    //
    // The path of the spec files will be resolved relative from the directory of
    // of the config file unless it's absolute.
    //
    specs: [
        // ToDo: define location for spec files here
        './features/**/*.feature',
    ],
    // Patterns to exclude.
    exclude: [
        // 'path/to/excluded/files'
    ],
    //
    // ============
    // Capabilities
    // ============
    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same
    // time. Depending on the number of capabilities, WebdriverIO launches several test
    // sessions. Within your capabilities you can overwrite the spec and exclude options in
    // order to group specific specs to a specific capability.
    //
    // First, you can define how many instances should be started at the same time. Let's
    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have
    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec
    // files and you set maxInstances to 10, all spec files will get tested at the same time
    // and 30 processes will get spawned. The property handles how many capabilities
    // from the same test should run tests.
    //
    maxInstances: 10,
    //
    // If you have trouble getting all important capabilities together, check out the
    // Sauce Labs platform configurator - a great tool to configure your capabilities:
    // https://saucelabs.com/platform/platform-configurator
    //
    capabilities: [{
        browserName: 'chrome'
    }],

    //
    // ===================
    // Test Configurations
    // ===================
    // Define all options that are relevant for the WebdriverIO instance here
    //
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    logLevel: 'warn',
    //
    // Set specific log levels per logger
    // loggers:
    // - webdriver, webdriverio
    // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service
    // - @wdio/mocha-framework, @wdio/jasmine-framework
    // - @wdio/local-runner
    // - @wdio/sumologic-reporter
    // - @wdio/cli, @wdio/config, @wdio/utils
    // Level of logging verbosity: trace | debug | info | warn | error | silent
    // logLevels: {
    //     webdriver: 'info',
    //     '@wdio/appium-service': 'info'
    // },
    //
    // If you only want to run your tests until a specific amount of tests have failed use
    // bail (default is 0 - don't bail, run all tests).
    bail: 0,
    //
    // Set a base URL in order to shorten url command calls. If your `url` parameter starts
    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.
    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
    // gets prepended directly.
    // baseUrl: 'http://localhost:8080',
    //
    // Default timeout for all waitFor* commands.
    waitforTimeout: 10000,
    //
    // Default timeout in milliseconds for request
    // if browser driver or grid doesn't send response
    connectionRetryTimeout: 120000,
    //
    // Default request retries count
    connectionRetryCount: 3,
    //
    // Test runner services
    // Services take over a specific job you don't want to take care of. They enhance
    // your test setup with almost no effort. Unlike plugins, they don't add new
    // commands. Instead, they hook themselves up into the test process.
    // services: [],
    //
    // Framework you want to run your specs with.
    // The following are supported: Mocha, Jasmine, and Cucumber
    // see also: https://webdriver.io/docs/frameworks
    //
    // Make sure you have the wdio adapter package for the specific framework installed
    // before running any tests.
    framework: 'cucumber',
    
    //
    // The number of times to retry the entire specfile when it fails as a whole
    // specFileRetries: 1,
    //
    // Delay in seconds between the spec file retry attempts
    // specFileRetriesDelay: 0,
    //
    // Whether or not retried spec files should be retried immediately or deferred to the end of the queue
    // specFileRetriesDeferred: false,
    //
    // Test reporter for stdout.
    // The only one supported by default is 'dot'
    // see also: https://webdriver.io/docs/dot-reporter
    reporters: ['spec',['allure', {outputDir: 'allure-results'}]],

    // If you are using Cucumber you need to specify the location of your step definitions.
    cucumberOpts: {
        // <string[]> (file/dir) require files before executing features
        require: ['./features/step-definitions/**/*.js'],
        // <boolean> show full backtrace for errors
        backtrace: false,
        // <string[]> ("extension:module") require files with the given EXTENSION after requiring MODULE (repeatable)
        requireModule: [],
        // <boolean> invoke formatters without executing steps
        dryRun: false,
        // <boolean> abort the run on first failure
        failFast: false,
        // <string[]> Only execute the scenarios with name matching the expression (repeatable).
        name: [],
        // <boolean> hide step definition snippets for pending steps
        snippets: true,
        // <boolean> hide source uris
        source: true,
        // <boolean> fail if there are any undefined or pending steps
        strict: false,
        // <string> (expression) only execute the features or scenarios with tags matching the expression
        tagExpression: '',
        // <number> timeout for step definitions
        timeout: 60000,
        // <boolean> Enable this config to treat undefined definitions as warnings.
        ignoreUndefinedDefinitions: false
    },


    //
    // =====
    // Hooks
    // =====
    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance
    // it and to build services around it. You can either apply a single function or an array of
    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got
    // resolved to continue.
    /**
     * Gets executed once before all workers get launched.
     * @param {object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     */
    // onPrepare: function (config, capabilities) {
    // },
    /**
     * Gets executed before a worker process is spawned and can be used to initialize specific service
     * for that worker as well as modify runtime environments in an async fashion.
     * @param  {string} cid      capability id (e.g 0-0)
     * @param  {object} caps     object containing capabilities for session that will be spawn in the worker
     * @param  {object} specs    specs to be run in the worker process
     * @param  {object} args     object that will be merged with the main configuration once worker is initialized
     * @param  {object} execArgv list of string arguments passed to the worker process
     */
    // onWorkerStart: function (cid, caps, specs, args, execArgv) {
    // },
    /**
     * Gets executed just after a worker process has exited.
     * @param  {string} cid      capability id (e.g 0-0)
     * @param  {number} exitCode 0 - success, 1 - fail
     * @param  {object} specs    specs to be run in the worker process
     * @param  {number} retries  number of retries used
     */
    // onWorkerEnd: function (cid, exitCode, specs, retries) {
    // },
    /**
     * Gets executed just before initialising the webdriver session and test framework. It allows you
     * to manipulate configurations depending on the capability or spec.
     * @param {object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that are to be run
     * @param {string} cid worker id (e.g. 0-0)
     */
    // beforeSession: function (config, capabilities, specs, cid) {
    // },
    /**
     * Gets executed before test execution begins. At this point you can access to all global
     * variables like `browser`. It is the perfect place to define custom commands.
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs        List of spec file paths that are to be run
     * @param {object}         browser      instance of created browser/device session
     */
    // before: function (capabilities, specs) {
    // },
    /**
     * Runs before a WebdriverIO command gets executed.
     * @param {string} commandName hook command name
     * @param {Array} args arguments that command would receive
     */
    // beforeCommand: function (commandName, args) {
    // },
    /**
     * Cucumber Hooks
     *
     * Runs before a Cucumber Feature.
     * @param {string}                   uri      path to feature file
     * @param {GherkinDocument.IFeature} feature  Cucumber feature object
     */
    // beforeFeature: function (uri, feature) {
    // },
    /**
     *
     * Runs before a Cucumber Scenario.
     * @param {ITestCaseHookParameter} world    world object containing information on pickle and test step
     * @param {object}                 context  Cucumber World object
     */
    beforeScenario: async(world, context) => {
        await browser.setWindowSize(1440, 900);
    },
    /**
     *
     * Runs before a Cucumber Step.
     * @param {Pickle.IPickleStep} step     step data
     * @param {IPickle}            scenario scenario pickle
     * @param {object}             context  Cucumber World object
     */
    // beforeStep: function (step, scenario, context) {
    // },
    /**
     *
     * Runs after a Cucumber Step.
     * @param {Pickle.IPickleStep} step             step data
     * @param {IPickle}            scenario         scenario pickle
     * @param {object}             result           results object containing scenario results
     * @param {boolean}            result.passed    true if scenario has passed
     * @param {string}             result.error     error stack if scenario failed
     * @param {number}             result.duration  duration of scenario in milliseconds
     * @param {object}             context          Cucumber World object
     */
    // afterStep: function (step, scenario, result, context) {
    // },
    /**
     *
     * Runs after a Cucumber Scenario.
     * @param {ITestCaseHookParameter} world            world object containing information on pickle and test step
     * @param {object}                 result           results object containing scenario results
     * @param {boolean}                result.passed    true if scenario has passed
     * @param {string}                 result.error     error stack if scenario failed
     * @param {number}                 result.duration  duration of scenario in milliseconds
     * @param {object}                 context          Cucumber World object
     */
    // afterScenario: function (world, result, context) {
    // },
    /**
     *
     * Runs after a Cucumber Feature.
     * @param {string}                   uri      path to feature file
     * @param {GherkinDocument.IFeature} feature  Cucumber feature object
     */
    // afterFeature: function (uri, feature) {
    // },
    
    /**
     * Runs after a WebdriverIO command gets executed
     * @param {string} commandName hook command name
     * @param {Array} args arguments that command would receive
     * @param {number} result 0 - command success, 1 - command error
     * @param {object} error error object if any
     */
    // afterCommand: function (commandName, args, result, error) {
    // },
    /**
     * Gets executed after all tests are done. You still have access to all global variables from
     * the test.
     * @param {number} result 0 - test pass, 1 - test fail
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that ran
     */
    // after: function (result, capabilities, specs) {
    // },
    /**
     * Gets executed right after terminating the webdriver session.
     * @param {object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {Array.<String>} specs List of spec file paths that ran
     */
    // afterSession: function (config, capabilities, specs) {
    // },
    /**
     * Gets executed after all workers got shut down and the process is about to exit. An error
     * thrown in the onComplete hook will result in the test run failing.
     * @param {object} exitCode 0 - success, 1 - fail
     * @param {object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     * @param {<Object>} results object containing test results
     */
    // onComplete: function(exitCode, config, capabilities, results) {
    // },
    /**
    * Gets executed when a refresh happens.
    * @param {string} oldSessionId session ID of the old session
    * @param {string} newSessionId session ID of the new session
    */
    // onReload: function(oldSessionId, newSessionId) {
    // }
    /**
    * Hook that gets executed before a WebdriverIO assertion happens.
    * @param {object} params information about the assertion to be executed
    */
    // beforeAssertion: function(params) {
    // }
    /**
    * Hook that gets executed after a WebdriverIO assertion happened.
    * @param {object} params information about the assertion that was executed, including its results
    */
    // afterAssertion: function(params) {
    // }
}
"









userinyerface.feature:
"

Feature: Userinyerface test
  I am a user
  I want to click on the HERE link to go to the next page
  So that I can choose 2 random interests, upload image, click "Next" button.

  Background:
    Given I'm on the Home page

  Scenario Outline: Test Case 01
    When I click the HERE link to navigate the next page.
    Then The '1' card is open.
    When I input random valid password, email, accept the terms of use and click "next" button.
    Then The '2' card is open.
    When I Choose 3 random interests, click "Next" button.
    Then The expected result is, Text 'Please upload a picture' appear, text color is green.

  Scenario Outline: Test Case 02
    When I hide help form.
    Then The form content is hidden.

  Scenario Outline: Test Case 03
    When I Accept cookies.
    Then The first form warning says 'Your password requires at least 10 characters.'.

  Scenario Outline: Test Case 04
    And I Validate that timer starts from "00:00:00"


"









baseElement.js:
"

class BaseElement {

	constructor (locator, name){
		this.locator = locator;
		this.name = name;
	}

	get elLocator (){
		return $(this.locator);
	}
	get elLocators (){
		return $$(this.locator);
	}
	async elText() {
		return (await this.elLocator).getText();
	}
	async confirmElement() {
		await expect(this.elLocator).toBeDisplayed();
	}
	async doClick (){
		await (await this.elLocator).click();
	}
	async clearAndType (value){
		await (await this.elLocator).clearValue();
		await (await this.elLocator).addValue(value);
	}
	async hoverOnIt (){
		await (await this.elLocator).moveTo();
	}
	async scrollToPosition (){
		await (await this.elLocator).scrollIntoView();
	}
	async matchTextColor (value){
		const elColor = (await this.elLocator.getCSSProperty(`color`)).value;
		await expect(elColor).toEqual(value);
	}
	async waitUntillElementVisible (){
		await (await this.elLocator).waitForDisplayed({timeout:30000});
		await expect(this.elLocator).toBeDisplayed();
	}
	async waitUntilInvisible() {
		browser.waitUntil(() => {
			return !this.elLocator.isDisplayed();
		}, {
			timeout: 15000,
			timeoutMsg: 'Element did not disappear within 15 seconds',
			interval: 500
		});
		
	}

	async clickAll (){
		this.elLocators.forEach(i => i.click());
	}
	async clickAny3 (){
		const i1 = Math.round(Math.random() * this.elLocators.length);
		const i2 = Math.round(Math.random() * this.elLocators.length);
		const i3 = Math.round(Math.random() * this.elLocators.length);
		this.elLocators.forEach(i => {
			if (i == i1 && i == i2 && i == i3){
				i.click();
			}
		});
	}
	async getSingleItemsText(index) {
		return this.elLocators[index].getText();
	}

}

export default BaseElement;"









basePage.js:
"

import BaseElement from "./baseElement.js";
import {expect} from '@wdio/globals';


class BasePage {

	constructor (){}

	/* async checkPageTitle(value) {
		const currentPageTitle = await browser.getTitle();
		await expect(currentPageTitle).toBe(await value);
	} */
	async confirmPage(element) {
		await element.confirmElement();
	}
	async currentElement(locator, name) {
		return new BaseElement(await locator, await name);
	}

}

export default BasePage;"









mainPage.js:
"

import BasePage from "./basePage.js";


class MainPage extends BasePage {

	constructor (){
		super();
		this.url = `https://userinyerface.com`;
	}

	async goToTargetURL (){
		await browser.url(this.url);
	}
	async confirmMainPage (){
		await this.confirmPage(await this.currentElement(`//a[@class='start__link']`, `HERE link`, `HERE link`));
	}
	async clickOnHERELink (){
		await (await this.currentElement(`//a[@class='start__link']`, `HERE link`)).doClick(); 
	}
	
}

export default MainPage;
"









registrationPage.js:
"

import BasePage from "./basePage.js";


class RegistrationPage extends BasePage {

	constructor (){
		super();
	}

	async confirmRegistrationPage (){
		await this.confirmPage(await this.currentElement(`//div[@class='timer timer--white timer--center']`, `Time counter element`));
	}
	async acceptCookies (){
		await (await this.currentElement(`//button[normalize-space()='Not really, no']`, `Cookies accept button`)).doClick();
	}
	async timeCounterFromAll0() {
		return await (await this.currentElement(`//div[@class='timer timer--white timer--center']`, `Time counter element`)).elText();
	}
	async fillPassword (){
		await (await this.currentElement(`//input[@placeholder='Choose Password']`,`Password field`)).clearAndType(`0-Password-0`);
	}
	async fillUsername (){
		await (await this.currentElement(`//input[@placeholder='Your email']`,`Username field`)).clearAndType(`a1qa`);
	}
	async fillEmailDomain (){
		await (await this.currentElement(`//input[@placeholder='Domain']`,`Domain field`)).clearAndType(`nomail`);
	}
	async clickSuffixDropdownArrow (){
		await (await this.currentElement(`//span[@class='icon icon-chevron-down']`,`Suffix dropdown arrow`)).doClick();
	}
	async selectSuffix (){
		await (await this.currentElement(`//*[contains(@class,'dropdown__list')][1]`,`Suffix list`)).waitUntillElementVisible();
		await (await this.currentElement(`//div[normalize-space()='.com']`,`.com suffix`)).scrollToPosition();
		await (await this.currentElement(`//div[normalize-space()='.com']`,`.com suffix`)).doClick();

	}
	async acceptTAndC (){
		await (await this.currentElement(`//span[@class='icon icon-check checkbox__check']`,`Terms & Conditions checkbox`)).doClick();
	}
	async clickNextBtn (){
		await (await this.currentElement(`//a[@class='button--secondary']`,`Next button`)).doClick();
	}
	async submitRegistrationForm (){
		await this.fillPassword();
		await this.fillUsername();
		await this.fillEmailDomain();
		await this.clickSuffixDropdownArrow();
		await this.selectSuffix();
		await this.acceptTAndC();
		await this.clickNextBtn();
	}
	async passwordLengthHint() {
		return (await this.currentElement(`//div[normalize-space()='Your password requires at least 10 characters.']`, `Form warning`)).elText();
	}
	async verifyTextColor() {
		await (await this.currentElement(`//div[normalize-space()='Your password requires at least 10 characters.']`, `Form warning element`)).matchTextColor(`rgba(41,197,102,1)`);
	}

	
	async hideHelpBox() {
		await (await this.currentElement(`//button[@class='button button--solid button--blue help-form__send-to-bottom-button']`, `HelpBox hide button`)).doClick();
	}
	async checkHelpBoxVisibility() {
		await (await this.currentElement(`//div[@class='help-form__container']`, `HelpBox container`)).waitUntilInvisible();
	}

}

export default RegistrationPage;

"









profilePage.js:
"

import BaseElement from "./baseElement.js";
import BasePage from "./basePage.js";


class ProfilePage extends BasePage {

	constructor (){
		super();
	}

	async confirmProfilePage (){
		await this.confirmPage(await this.currentElement(`//h2[normalize-space()='Choose 3 interests']`, `Interests checkboxes heading`));
	}
	async selectAny3Interests (){
		await (await this.currentElement(`//*[contains(@class,'checkbox small')]`, `Interests checkboxes`)).clickAll();
		await (await this.currentElement(`//*[contains(@class,'checkbox small')]`, `Interests checkboxes`)).clickAny3();
	}
	async clickOnNextBtn (){
		await (await this.currentElement(`//button[normalize-space()='Next']`,`Next button`)).doClick();
	}
	async profilePicWarning() {
		return (await this.currentElement(`//li[normalize-space()='Please upload a picture']`, `Profile picture warning element.`)).elText();
	}
	async verifyTextColor() {
		await (await this.currentElement(`//li[normalize-space()='Please upload a picture']`, `Image upload warning element`)).matchTextColor(`rgba(41,197,102,1)`);
	}

}

export default ProfilePage;"









testCase-01.js:
"

import { Given, When, Then } from '@wdio/cucumber-framework';
import {expect} from '@wdio/globals';
import MainPage from '../pageobjects/mainPage.js';
import RegistrationPage from '../pageobjects/registrationPage.js';
import ProfilePage from '../pageobjects/profilePage.js';


let mainPage, registrationPage, profilePage;

Given (`I'm on the Home page`, async ()=>{
	mainPage = new MainPage();
	await mainPage.goToTargetURL();
	await mainPage.confirmMainPage();
});
When (`I click the HERE link to navigate the next page.`, async ()=>{
	await mainPage.clickOnHERELink();
});
Then (`The '1' card is open.`, async ()=>{
	registrationPage = new RegistrationPage();
	await registrationPage.confirmRegistrationPage();
	await registrationPage.acceptCookies();
});
When (`I input random valid password, email, accept the terms of use and click "next" button.`, async ()=>{
	await registrationPage.submitRegistrationForm();
});
Then (`The '2' card is open.`, async ()=>{
	profilePage = new ProfilePage();
	await profilePage.confirmProfilePage();
});
When (`I Choose 3 random interests, click "Next" button.`, async ()=>{
	await profilePage.selectAny3Interests();
	await profilePage.clickOnNextBtn();
});
Then (`The expected result is, Text {string} appear, text color is green.`, async (string)=>{
	await expect(await profilePage.profilePicWarning()).toEqual(string);
	await profilePage.verifyTextColor();
});
"









testCase-02.js:
"

import { Given, When, Then } from "@wdio/cucumber-framework";
import MainPage from "../pageobjects/mainPage.js";
import RegistrationPage from "../pageobjects/registrationPage.js";


let mainPage, registrationPage;

When (`I hide help form.`, async ()=>{
	mainPage = new MainPage();
	await mainPage.clickOnHERELink();
	registrationPage = new RegistrationPage();
	await registrationPage.acceptCookies();
	await registrationPage.hideHelpBox();
});

Then (`The form content is hidden.`, async ()=>{
	await registrationPage.checkHelpBoxVisibility();
});"









testCase-03.js:
"

import { Given, When, Then } from "@wdio/cucumber-framework";
import {expect} from '@wdio/globals';
import MainPage from "../pageobjects/mainPage.js";
import RegistrationPage from "../pageobjects/registrationPage.js";


let mainPage, registrationPage, profilePage;

When (`I Accept cookies.`, async ()=>{
	mainPage = new MainPage();
	await mainPage.clickOnHERELink();
	registrationPage = new RegistrationPage();
	await registrationPage.acceptCookies();
});

Then (`The first form warning says {string}.`, async (string)=>{
	await expect(await registrationPage.passwordLengthHint()).toEqual(string);
	await registrationPage.verifyTextColor();
});"









testCase-04.js:
"

import { Given, When, Then } from "@wdio/cucumber-framework";
import {expect} from '@wdio/globals';
import MainPage from "../pageobjects/mainPage.js";
import RegistrationPage from "../pageobjects/registrationPage.js";


let mainPage, registrationPage;

When (`I Validate that timer starts from {string}`, async (string)=>{
	mainPage = new MainPage();
	await mainPage.clickOnHERELink();
	registrationPage = new RegistrationPage();
	await expect(await registrationPage.timeCounterFromAll0()).toEqual(string);
	// await registrationPage.acceptCookies();
});"









npx wdio result:
"PS D:\Enter\Git\WebDriverIO_Practice_0001\entranceTests> npx wdio

Execution of 1 workers started at 2024-04-16T15:04:05.991Z

2024-04-16T15:04:06.783Z WARN webdriver: Chromedriver v123.0.6312.123 don't exist, trying to find known good version...
[0-0] RUNNING in chrome - file:///D:/Enter/Git/WebDriverIO_Practice_0001/entranceTests/features/userinyerface.feature
[0-0] 2024-04-16T15:04:09.332Z WARN webdriver: Chromedriver v123.0.6312.123 don't exist, trying to find known good version...

DevTools listening on ws://127.0.0.1:57848/devtools/browser/91fc8529-327b-4632-a553-2266c9e9a068
[0-0] 2024-04-16T15:04:16.573Z WARN webdriverio: Failed to execute "scrollIntoView" using WebDriver Actions API: move target out of bounds
[0-0]   (Session info: chrome=123.0.6312.106)!
[0-0] Re-attempting using `Element.scrollIntoView` via Web API.
[0-0] PASSED in chrome - file:///D:/Enter/Git/WebDriverIO_Practice_0001/entranceTests/features/userinyerface.feature

 "spec" Reporter:
------------------------------------------------------------------
[chrome 123.0.6312.106 windows #0-0] Running: chrome (v123.0.6312.106) on windows
[chrome 123.0.6312.106 windows #0-0] Session ID: abebd57daf1e26f88502729adc8d4290
[chrome 123.0.6312.106 windows #0-0]
[chrome 123.0.6312.106 windows #0-0] » \features\userinyerface.feature
[chrome 123.0.6312.106 windows #0-0] Userinyerface test
[chrome 123.0.6312.106 windows #0-0] I am a user
[chrome 123.0.6312.106 windows #0-0] I want to click on the HERE link to go to the next page
[chrome 123.0.6312.106 windows #0-0] So that I can choose 2 random interests, upload image, click "Next" button.
[chrome 123.0.6312.106 windows #0-0]
[chrome 123.0.6312.106 windows #0-0] Test Case 01
[chrome 123.0.6312.106 windows #0-0]    ✓ Given I'm on the Home page
[chrome 123.0.6312.106 windows #0-0]    ✓ When I click the HERE link to navigate the next page.
[chrome 123.0.6312.106 windows #0-0]    ✓ Then The '1' card is open.
[chrome 123.0.6312.106 windows #0-0]    ✓ When I input random valid password, email, accept the terms of use and click "next" button.
[chrome 123.0.6312.106 windows #0-0]    ✓ Then The '2' card is open.
[chrome 123.0.6312.106 windows #0-0]    ✓ When I Choose 3 random interests, click "Next" button.
[chrome 123.0.6312.106 windows #0-0]    ✓ Then The expected result is, Text 'Please upload a picture' appear, text color is green.
[chrome 123.0.6312.106 windows #0-0]
[chrome 123.0.6312.106 windows #0-0] Test Case 02
[chrome 123.0.6312.106 windows #0-0]    ✓ Given I'm on the Home page
[chrome 123.0.6312.106 windows #0-0]    ✓ When I hide help form.
[chrome 123.0.6312.106 windows #0-0]    ✓ Then The form content is hidden.
[chrome 123.0.6312.106 windows #0-0]
[chrome 123.0.6312.106 windows #0-0] Test Case 03
[chrome 123.0.6312.106 windows #0-0]    ✓ Given I'm on the Home page
[chrome 123.0.6312.106 windows #0-0]    ✓ When I Accept cookies.
[chrome 123.0.6312.106 windows #0-0]    ✓ Then The first form warning says 'Your password requires at least 10 characters.'.
[chrome 123.0.6312.106 windows #0-0]
[chrome 123.0.6312.106 windows #0-0] Test Case 04
[chrome 123.0.6312.106 windows #0-0]    ✓ Given I'm on the Home page
[chrome 123.0.6312.106 windows #0-0]    ✓ And I Validate that timer starts from "00:00:00"
[chrome 123.0.6312.106 windows #0-0]
[chrome 123.0.6312.106 windows #0-0] 15 passing (12.2s)


Spec Files:      1 passed, 1 total (100% completed) in 00:00:17

PS D:\Enter\Git\WebDriverIO_Practice_0001\entranceTests> "